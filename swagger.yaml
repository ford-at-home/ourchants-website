openapi: 3.0.0
info:
  title: OurChants API
  description: |
    A serverless REST API for managing song data.
    
    Important Notes:
    1. DynamoDB SDK Representation:
       - The AWS SDK wraps all values in type descriptors (S, N, L, M, etc.)
       - This is normal and should not be "fixed" or simplified
       - The M->S->S pattern in responses is just the SDK's way of representing data
  version: 1.0.0

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    variables:
      apiId:
        description: API Gateway ID
        default: your-api-id
      region:
        description: AWS Region
        default: us-east-1
      stage:
        description: API Stage
        default: prod

components:
  schemas:
    DynamoDBString:
      type: object
      properties:
        S:
          type: string
      description: DynamoDB string type descriptor
    
    DynamoDBList:
      type: object
      properties:
        L:
          type: array
          items:
            $ref: '#/components/schemas/DynamoDBString'
      description: DynamoDB list type descriptor
    
    Song:
      type: object
      required:
        - title
        - artist
      properties:
        song_id:
          $ref: '#/components/schemas/DynamoDBString'
          description: Unique identifier for the song
          readOnly: true
        title:
          $ref: '#/components/schemas/DynamoDBString'
          description: Title of the song
          example: {"S": "21 Wairaitirai Suntarai snippet-?"}
        artist:
          $ref: '#/components/schemas/DynamoDBString'
          description: Artist who performed the song
          example: {"S": "Muse"}
        album:
          $ref: '#/components/schemas/DynamoDBString'
          description: Album name
          example: {"S": "Muse"}
        bpm:
          $ref: '#/components/schemas/DynamoDBString'
          description: Beats per minute of the song
          example: {"S": "120"}
        composer:
          $ref: '#/components/schemas/DynamoDBString'
          description: Composer of the song
          example: {"S": "Allah"}
        version:
          $ref: '#/components/schemas/DynamoDBString'
          description: Version or variation of the song
          example: {"S": "del Tiempo"}
        date:
          $ref: '#/components/schemas/DynamoDBString'
          description: Date associated with the song
          example: {"S": "2012-04-06 09:36:00"}
        filename:
          $ref: '#/components/schemas/DynamoDBString'
          description: Name of the song file
          example: {"S": "21_wairaitirai_suntarai_snippet-_.mp3"}
        filepath:
          $ref: '#/components/schemas/DynamoDBString'
          description: Path to the song file
          example: {"S": "Media.localized/21_wairaitirai_suntarai_snippet-_.mp3"}
        description:
          $ref: '#/components/schemas/DynamoDBString'
          description: Additional description or notes about the song
          example: {"S": ""}
        lineage:
          $ref: '#/components/schemas/DynamoDBList'
          description: Track history or related songs
          example: {"L": [{"S": "original"}]}
        s3_uri:
          $ref: '#/components/schemas/DynamoDBString'
          description: S3 URI of the audio file
          example: {"S": "s3://ourchants-songs/songs/123/21_wairaitirai_suntarai_snippet-_.mp3"}
    
    SongList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        total:
          type: integer
          description: Total number of songs matching the filter
        has_more:
          type: boolean
          description: Whether there are more songs available
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error message
        code:
          type: string
          description: Error code
          enum:
            - INVALID_REQUEST
            - INVALID_PAGINATION
            - INVALID_LIMIT
            - INVALID_OFFSET
            - INVALID_BUCKET_NAME
            - INVALID_OBJECT_KEY
            - BUCKET_NOT_FOUND
            - OBJECT_NOT_FOUND
            - INTERNAL_ERROR

paths:
  /songs:
    get:
      summary: List songs
      description: Get a list of songs with optional artist filtering
      operationId: listSongs
      parameters:
        - name: artist
          in: query
          required: false
          schema:
            type: string
          description: Filter songs by artist name (case-insensitive)
      responses:
        '200':
          description: List of songs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new song
      description: Creates a new song with the provided data
      operationId: createSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '201':
          description: Song created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /songs/{song_id}:
    parameters:
      - name: song_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the song to operate on
    
    get:
      summary: Get a specific song
      description: Retrieves a specific song by its ID
      operationId: getSong
      responses:
        '200':
          description: Song retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '404':
          description: Song not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a song
      description: Updates an existing song with the provided data
      operationId: updateSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '200':
          description: Song updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '404':
          description: Song not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a song
      description: Deletes a specific song by its ID
      operationId: deleteSong
      responses:
        '204':
          description: Song deleted successfully
        '404':
          description: Song not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presigned-url:
    post:
      summary: Generate pre-signed URL
      description: Generates a pre-signed URL for accessing an S3 object
      operationId: generatePresignedUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bucket
                - key
              properties:
                bucket:
                  type: string
                  description: S3 bucket name
                  example: "ourchants-songs"
                key:
                  type: string
                  description: S3 object key
                  example: "songs/123/song.mp3"
      responses:
        '200':
          description: Pre-signed URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Pre-signed URL
                    example: "https://ourchants-songs.s3.amazonaws.com/songs/123/song.mp3?X-Amz-Algorithm=..."
                  expiresIn:
                    type: integer
                    description: URL expiration time in seconds
                    example: 3600
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key 